// *** process begin ***

// python source contains comments on queries as well

// e for expected value
// c for cumulative
// p for partition

// sascha queries A-D begin

// (A) and (Ae) time up to: first finished working and entered
R{"time_not_all_are_working"}=? [I=time] / base_rate
R{"time"}=? [F all_are_done] - R{"time_not_all_are_working"}=? [F all_are_done]

// (B) and (Be) time up to: last finished working and entered
R{"time_not_one_is_working"}=? [I=time] / base_rate
R{"time"}=? [F all_are_done] - R{"time_not_one_is_working"}=? [F all_are_done]

// (C) and (Ce) time up to: first recognized the barrier is full and left
R{"time_one_is_done"}=? [I=time] / base_rate
R{"time"}=? [F all_are_done] - R{"time_one_is_done"}=? [F all_are_done]

// (D) and (De) time up to: all recognized the barrier is full and left
R{"time_all_are_done"}=? [I=time] / base_rate
R{"time"}=? [F all_are_done] - R{"time_all_are_done"}=? [F all_are_done]


// (D-B)e from last to enter to last to leave
(R{"time"}=? [F all_are_done] - R{"time_all_are_done"}=? [F all_are_done]) - (R{"time"}=? [F all_are_done] - R{"time_not_one_is_working"}=? [F all_are_done])

// (D-C)e from first to leave to last to leave
(R{"time"}=? [F all_are_done] - R{"time_all_are_done"}=? [F all_are_done]) - (R{"time"}=? [F all_are_done] - R{"time_one_is_done"}=? [F all_are_done])

// sascha queries A-D end

// partition queries "one" begin

// (Ap) and (Ape) time up to: first finished working and entered
R{"time_all_are_working"}=? [I=time] / base_rate
R{"time_all_are_working"}=? [F all_are_done]

// (0p) and (0pe) time from the first entered round 0 until the first entered round 1
R{"time_round_0_one"}=? [I=time] / base_rate
R{"time_round_0_one"}=? [F all_are_done]

// (1p) and (1pe) time from the first entered round 1 until the first entered round 2
R{"time_round_1_one"}=? [I=time] / base_rate
R{"time_round_1_one"}=? [F all_are_done]

// (Cp) and (Cpe) time all are done
R{"time_one_is_done"}=? [I=time] / base_rate
R{"time_one_is_done"}=? [F all_are_done]

// partition queries "one" end

// partition queries "all" begin

// (Bp) and (Bpe) time up to: first finished working and entered
R{"time_one_is_working"}=? [I=time] / base_rate
R{"time_one_is_working"}=? [F all_are_done]

// (0p) and (0pe) time from the last entered round 0 until the last entered round 1
R{"time_round_0_all"}=? [I=time] / base_rate
R{"time_round_0_all"}=? [F all_are_done]

// (1p) and (1pe) time from the last entered round 1 until the last entered round 2
R{"time_round_1_all"}=? [I=time] / base_rate
R{"time_round_1_all"}=? [F all_are_done]

// (Dp) and (Dpe) time all are done
R{"time_all_are_done"}=? [I=time] / base_rate
R{"time_all_are_done"}=? [F all_are_done]

// partition queries "all" end

// cumulative queries begin

// (Ac) and (Ace) time up to: first finished working and entered
R{"time_all_are_working"}=? [C<=time]
R{"time_all_are_working"}=? [F all_are_done]

// (Bc) and (Bce) time up to: last finished working and entered
R{"time_one_is_working"}=? [C<=time]
R{"time_one_is_working"}=? [F all_are_done]

// (0c) and (0ce) time from the first entered round 0 until the first entered round 1
R{"time_round_0_one"}=? [C<=time]
R{"time_round_0_one"}=? [F all_are_done]

// (0c) and (0ce) time from the last entered round 0 until the last entered round 1
R{"time_round_0_all"}=? [C<=time]
R{"time_round_0_all"}=? [F all_are_done]

// (1c) and (1ce) time from the first entered round 1 until the first entered round 2
R{"time_round_1_one"}=? [C<=time]
R{"time_round_1_one"}=? [F all_are_done]

// (1c) and (1ce) time from the last entered round 1 until the last entered round 2
R{"time_round_1_all"}=? [C<=time]
R{"time_round_1_all"}=? [F all_are_done]

// (Cc) and (Cce) time up to: first recognized the barrier is full and left
R{"time_not_one_is_done"}=? [C<=time]
R{"time_not_one_is_done"}=? [F all_are_done]

// (Dc) and (Dce) time up to: all recognized the barrier is full and left
R{"time_not_all_are_done"}=? [C<=time]
R{"time_not_all_are_done"}=? [F all_are_done]

// cumulative queries end

const double time=ticks/base_rate;
const double ticks;

// *** process end ***
