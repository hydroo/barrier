shared: entry[0..arrayLength-1]:=0, exit[0..arrayLength-1]:=0, left:=false
local: arrayLength:=((numThreads-1)/bitsPerArrayElement)+1,
       copy[0..arrayLength-1],
	   me:=$2^{threadIndex%bitsPerArrayElement}$,
	   arrayIndex:=threadIndex/bitsPerArray
	   full[0..arrayLength-1]:=$\sum_{i=0}^{numThreads-1}2^i$

if left = false {

	do {
		copy[arrayIndex] &= ~me
		for i = 0; i < arrayLength; i += 1 {
			copy[i] |= entry[i]
		}


		if copy[arrayIndex] & me == 0 {
			copy[arrayIndex] |= me
			entry[arrayIndex] = copy[arrayIndex]
		}
	} while copy[:] != full[:] && left == 0

	left = 1
	exit[:] = 0
	copy[:] = 0

} else if left = true {

	do {

		copy[arrayIndex] &= ~me
		for i = 0; i < arrayLength; i += 1 {
			copy[i] |= exit[i]
		}

		if copy[arrayIndex] & me == 0 {
			copy[arrayIndex] |= me
			exit[arrayIndex] = copy[arrayIndex]
		}
	}while copy[:] != full[:] && left == 1

	left = 0
	entry[:] = 0
	copy[:] = 0

}

