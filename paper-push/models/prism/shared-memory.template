ctmc

// model parameter
const int noOfDataValues = $D$;

// rate parameter
const double write    = 2;
const double read     = 2;

const double wr       = 2;
const double pr       = 2;
const double rer      = 2;
const double ir       = 2;
const double pir      = 2;
const double reactive = 1;

// simple thread
module thread1
  v_localdata1 : [1..noOfDataValues];

  // writing:
  [v_push_write1] true -> write:true;
++	for i in xrange(1,D+1):
  [v_write1] true -> reactive:(v_localdata1'=$i$);
--
  
  // reading:
  [v_push_read1] true -> read:true;
++	for j in xrange(2,T+1):
  [v_push$j$1] true -> reactive:(v_localdata1'=v_localdata$j$);
--
endmodule

++	for i in xrange(2,T+1):
module thread$i$ = thread1 [
  // localdata:
  v_localdata1=v_localdata$i$, 
++	for j in xrange(1,T):
  v_localdata$j+1$=v_localdata$j+(j>=i)$, 
--

  // messages:
  v_push_write1=v_push_write$i$, v_write1=v_write$i$, 
++	for j in xrange(1,T):
  v_push$j+1$1=v_push$j+(j>=i)$$i$,
--
  v_push_read1=v_push_read$i$
] 
endmodule

--

// BEGIN Memory Managaer

++	for j in xrange(1,T+1):
formula v_inform$j$       = ($' & '.join(['v_inform%d%d=false' %(k,i) for k in [j] for i in xrange(1,T+1) if i!=j])$);
--
formula v_noInforms     = ($' & '.join(['v_inform%d' %i for i in xrange(1,T+1)])$);
formula v_noInvalidates = ($' & '.join(['v_invalidate%d=false' %i for i in xrange(1,T+1)])$);
formula v_readReady     = (v_noInforms & v_noInvalidates);
formula v_writeReady    = (v_readReady);

// global variables valid_i encapsulated in a separate module
module v_validity
++	for i in xrange(1,T+1):
++	if (i==1):
  v_valid1: bool init true;
--
++	if (i!=1):
  v_valid$i$: bool init false;
--
--

++	for i in xrange(1,T+1):
  [v_set_invalid$i$] true -> reactive:(v_valid$i$'=false);
--

++	for i in xrange(1,T+1):
++	for j in xrange(1,T+1):
++	if (i!=j):  
  [v_push$i$$j$] true -> reactive:(v_valid$j$'=true);
--
--
--
endmodule

// global variables for ownership encapsulated in a separate module
module v_ownership
  v_currentOwner : [0..$T$] init 1;
  v_nextOwner : [0..$T$] init 0;

++	for i in xrange(1,T+1):
  [v_push_write$i$] true -> reactive:(v_nextOwner'=$i$);
--

++	for i in xrange(1,T+1):
  [v_write$i$] v_nextOwner=$i$ -> wr:(v_currentOwner'=$i$);
--
endmodule

// locations for mm control flow
const int idle       = 0;
const int invalidate = 1;
const int writing    = 2;
const int inform     = 3;
const int reading    = 4;

module v_mm_control_flow
  v_loc : [0..4] init idle;
  
++	for i in xrange(1,T+1):
  [v_push_write$i$] (v_loc=idle) & v_writeReady -> reactive:(v_loc'=invalidate);
--

++	for i in xrange(1,T+1):
  [v_write$i$] (v_loc=invalidate) & v_writeReady -> reactive:(v_loc'=writing);
--

++	for i in xrange(1,T+1):
  [v_push_Inform$i$] (v_loc=writing) -> reactive:(v_loc'=inform);
--

++	for i in xrange(1,T+1):  
  [v_push_read$i$] (v_loc=idle) & v_readReady -> reactive:(v_loc'=reading);
--

  [v_restart] (v_loc=reading) & v_readReady  -> rer:(v_loc'=idle);
  [v_restart] (v_loc=inform)  & v_writeReady -> rer:(v_loc'=idle);
endmodule

// mm actions
module v_mm_activity
++	for i in xrange(1,T+1):
  v_invalidate$i$ : bool init false;
--

++	for i in xrange(1,T+1):
++	for j in xrange(1,T+1):
++	if (i!=j):  
  v_inform$i$$j$ : bool init false;
--
--
--

  // invalidating
++	for i in xrange(1,T+1):
  [v_push_write$i$] true -> reactive:$' & '.join(['(v_invalidate%d\'=true)' %j for j in xrange(1,T+1) if i!=j])$;
--

++	for i in xrange(1,T+1):
  [v_set_invalid$i$] (v_invalidate$i$=true) -> ir:(v_invalidate$i$'=false);
--

  // pushes triggered by writing
++	for i in xrange(1,T+1):
  [v_push_Inform$i$] (v_currentOwner=$i$) -> pir:$' & '.join(['(v_inform%d%d\'=true)' % (k,j) for k in [i] for j in xrange(1,T+1) if i!=j])$;
--

  // pushes triggered by reading
++	for i in xrange(1,T+1):
++	for j in xrange(1,T+1):
++	if (i!=j):
  [v_push_read$i$] (v_currentOwner=$j$) -> reactive:(v_inform$j$$i$'=true);
--
--
--

  // pushes (triggered by either reads or writes)
++	for i in xrange(1,T+1):
++	for j in xrange(1,T+1):
++	if (i!=j):
  [v_push$i$$j$] (v_inform$i$$j$=true) -> pr:(v_inform$i$$j$'=false);
--
--
--
endmodule

// END Memory Manager

// costs model - states
const double idleCosts       = 0;
const double invalidateCosts = 1;
const double writingCosts    = 2;
const double informCosts     = 3;
const double readingCosts    = 4;

rewards "v_location_costs"
  (v_loc=idle)       : idleCosts;
  (v_loc=invalidate) : invalidateCosts;
  (v_loc=writing)    : writingCosts;
  (v_loc=inform)     : informCosts;
  (v_loc=reading)    : readingCosts;
endrewards

// costs model - transitions
const double invCosts         = 0.25;
const double writeCosts       = 2.0;
const double readCosts        = 1.0;

const double pushMessageCosts = 0.5;
const double pushInvCosts     = pushMessageCosts;
const double pushInformCosts  = pushMessageCosts;
const double pushReadCosts    = pushMessageCosts;

rewards "transition_costs"
  // push_message costs
++	for i in xrange(1,T+1):
  [v_push_write$i$] true : pushInvCosts;
--

++	for i in xrange(1,T+1):
  [v_push_Inform$i$] true : pushInformCosts;
--

++	for i in xrange(1,T+1):
  [v_push_read$i$] true : pushReadCosts;
--
  
  // invalidation costs
++	for i in xrange(1,T+1):  
  [v_set_invalid$i$] true : invCosts; 
--

  // write costs
++	for i in xrange(1,T+1):
  [v_write$i$] true : writeCosts;
--

  // read costs
++	for i in xrange(1,T+1):
++	for j in xrange(1,T+1):
++	if (i!=j):
  [v_push$i$$j$] true : readCosts;
--
--
--

  // [v_restart] true : 0; // (hidden)
endrewards

// composition (not yet useable by simulator)
// system
//   (thread1 || thread2 || thread3 || v_validity || v_ownership || v_mm_control_flow / {v_restart} || v_mm_activity)
// endsystem
